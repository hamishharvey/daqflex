//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeasurementComputing.DAQFlex {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ErrorMessages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ErrorMessages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MeasurementComputing.DAQFlex.ErrorMessages", typeof(ErrorMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal error - couldn&apos;t set active channels..
        /// </summary>
        public static string ActiveChannelsNotSet {
            get {
                return ResourceManager.GetString("ActiveChannelsNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Ai calibration is in progress..
        /// </summary>
        public static string AiCalibrationInProgress {
            get {
                return ResourceManager.GetString("AiCalibrationInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Ao calibration is in progress..
        /// </summary>
        public static string AoCalibrationInProgress {
            get {
                return ResourceManager.GetString("AoCalibrationInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified port does not support bitwise configuration..
        /// </summary>
        public static string BitConfigurationNotSupported {
            get {
                return ResourceManager.GetString("BitConfigurationNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device does not support bulk input transfers..
        /// </summary>
        public static string BulkInputTransfersNotSupported {
            get {
                return ResourceManager.GetString("BulkInputTransfersNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device does not support bulk output transfers..
        /// </summary>
        public static string BulkOutputTransfersNotSupported {
            get {
                return ResourceManager.GetString("BulkOutputTransfersNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A bulk out transfer error occurred..
        /// </summary>
        public static string BulkOutTransferError {
            get {
                return ResourceManager.GetString("BulkOutTransferError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only the STATUS, COUNT, INDEX and STOP messages may be sent to the device while a BURSTIO scan is in progress..
        /// </summary>
        public static string BurstIoInProgress {
            get {
                return ResourceManager.GetString("BurstIoInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of samples specified for the callback method is greater than the number of samples requested..
        /// </summary>
        public static string CallbackCountGreaterThanRequestedSamples {
            get {
                return ResourceManager.GetString("CallbackCountGreaterThanRequestedSamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback count is too large. .
        /// </summary>
        public static string CallbackCountTooLarge {
            get {
                return ResourceManager.GetString("CallbackCountTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback operation has already been enabled..
        /// </summary>
        public static string CallbackOperationAlreadyEnabled {
            get {
                return ResourceManager.GetString("CallbackOperationAlreadyEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified digital port is not an output port and cannot be written to..
        /// </summary>
        public static string CantWriteDioPort {
            get {
                return ResourceManager.GetString("CantWriteDioPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Continuous Mode cannot be used with Foreground Mode..
        /// </summary>
        public static string ContinuousNotCompatibleWithForeground {
            get {
                return ResourceManager.GetString("ContinuousNotCompatibleWithForeground", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while copying data to the internal read buffer..
        /// </summary>
        public static string CopyingDataToInternalWriteBufferFailed {
            get {
                return ResourceManager.GetString("CopyingDataToInternalWriteBufferFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more DaqDevice objects need to be released before calling GetDeviceNames..
        /// </summary>
        public static string DaqDeviceListNotEmpty {
            get {
                return ResourceManager.GetString("DaqDeviceListNotEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A data overrun occurred..
        /// </summary>
        public static string DataOverrun {
            get {
                return ResourceManager.GetString("DataOverrun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A data underrun occurred..
        /// </summary>
        public static string DataUnderrun {
            get {
                return ResourceManager.GetString("DataUnderrun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error getting USB devices - detail buffer is null..
        /// </summary>
        public static string DetailBufferIsNull {
            get {
                return ResourceManager.GetString("DetailBufferIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A handle has already been created for the specified device.
        /// </summary>
        public static string DeviceHandleAlreadyCreated {
            get {
                return ResourceManager.GetString("DeviceHandleAlreadyCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device handle is null..
        /// </summary>
        public static string DeviceHandleIsNull {
            get {
                return ResourceManager.GetString("DeviceHandleIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device handle has been released. Use DaqDeviceManager.CreateDevice to recreate the device handle..
        /// </summary>
        public static string DeviceHasBeenReleased {
            get {
                return ResourceManager.GetString("DeviceHasBeenReleased", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name format includes a device ID but the device ID is not set..
        /// </summary>
        public static string DeviceIDNotSet {
            get {
                return ResourceManager.GetString("DeviceIDNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device is missing a serial number or user ID..
        /// </summary>
        public static string DeviceIsMissingSernoOrID {
            get {
                return ResourceManager.GetString("DeviceIsMissingSernoOrID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A device with the specified name was not found in the device list..
        /// </summary>
        public static string DeviceNotFoundInList {
            get {
                return ResourceManager.GetString("DeviceNotFoundInList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device failed to initialize..
        /// </summary>
        public static string DeviceNotInitialized {
            get {
                return ResourceManager.GetString("DeviceNotInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device is not responding..
        /// </summary>
        public static string DeviceNotResponding {
            get {
                return ResourceManager.GetString("DeviceNotResponding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified digital bit is not configured for output..
        /// </summary>
        public static string DioBitNotSetForOutput {
            get {
                return ResourceManager.GetString("DioBitNotSetForOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified digital port is not configured for output..
        /// </summary>
        public static string DioPortNotSetForOutput {
            get {
                return ResourceManager.GetString("DioPortNotSetForOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate channels are not supported by the analog input queue..
        /// </summary>
        public static string DuplicateChannelsNotSupportedInQueue {
            get {
                return ResourceManager.GetString("DuplicateChannelsNotSupportedInQueue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The end of the read buffer has been reached..
        /// </summary>
        public static string EndOfReadBufferReached {
            get {
                return ResourceManager.GetString("EndOfReadBufferReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while writing data to the external input scan buffer..
        /// </summary>
        public static string ErrorWritingDataToExternalInputBuffer {
            get {
                return ResourceManager.GetString("ErrorWritingDataToExternalInputBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device&apos;s FPGA could not be loaded..
        /// </summary>
        public static string FpgaNotLoaded {
            get {
                return ResourceManager.GetString("FpgaNotLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The gain queue does not support the number of elements specified..
        /// </summary>
        public static string GainQueueDepthExceeded {
            get {
                return ResourceManager.GetString("GainQueueDepthExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device does not support gain queue..
        /// </summary>
        public static string GainQueueNotSupported {
            get {
                return ResourceManager.GetString("GainQueueNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incompatible clock option was specified..
        /// </summary>
        public static string IncompatibleClockOption {
            get {
                return ResourceManager.GetString("IncompatibleClockOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The digital port is not configured correctly for the requested operation..
        /// </summary>
        public static string IncorrectPortConfig {
            get {
                return ResourceManager.GetString("IncorrectPortConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the input buffer cannot be set while an input scan is running..
        /// </summary>
        public static string InputBufferCannotBeSet {
            get {
                return ResourceManager.GetString("InputBufferCannotBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input scan data was overwritten before being read..
        /// </summary>
        public static string InputBufferOverrun {
            get {
                return ResourceManager.GetString("InputBufferOverrun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input queue is enabled but contains no elements..
        /// </summary>
        public static string InputQueueIsEmpty {
            get {
                return ResourceManager.GetString("InputQueueIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of samples have been set to a value that is greater than the internal buffer size. Increase the buffer size using the BUFSIZE property..
        /// </summary>
        public static string InputSamplesGreaterThanBufferSize {
            get {
                return ResourceManager.GetString("InputSamplesGreaterThanBufferSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An input scan is already in progress for the specified device..
        /// </summary>
        public static string InputScanAlreadyInProgress {
            get {
                return ResourceManager.GetString("InputScanAlreadyInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input scan rate cannot be zero..
        /// </summary>
        public static string InputScanRateCannotBeZero {
            get {
                return ResourceManager.GetString("InputScanRateCannotBeZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified number of samples to read is zero..
        /// </summary>
        public static string InputScanReadCountIsZero {
            get {
                return ResourceManager.GetString("InputScanReadCountIsZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string InputScanStartedWithZeroSamples {
            get {
                return ResourceManager.GetString("InputScanStartedWithZeroSamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input scan read operation has timed out..
        /// </summary>
        public static string InputScanTimeOut {
            get {
                return ResourceManager.GetString("InputScanTimeOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while trying to copy data to the internal read buffer..
        /// </summary>
        public static string InternalReadBufferError {
            get {
                return ResourceManager.GetString("InternalReadBufferError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid A/D averaging value was specified..
        /// </summary>
        public static string InvalidAdAvgValue {
            get {
                return ResourceManager.GetString("InvalidAdAvgValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid A/D settling time was specified..
        /// </summary>
        public static string InvalidAdSettlingTime {
            get {
                return ResourceManager.GetString("InvalidAdSettlingTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid analog input channel mode was specified..
        /// </summary>
        public static string InvalidAiChannelMode {
            get {
                return ResourceManager.GetString("InvalidAiChannelMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid analog input channel was specified..
        /// </summary>
        public static string InvalidAiChannelSpecified {
            get {
                return ResourceManager.GetString("InvalidAiChannelSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid analog input range was specified..
        /// </summary>
        public static string InvalidAiRange {
            get {
                return ResourceManager.GetString("InvalidAiRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid analog input trigger channel was specified..
        /// </summary>
        public static string InvalidAiTriggerChannel {
            get {
                return ResourceManager.GetString("InvalidAiTriggerChannel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid analog input trigger level was specified..
        /// </summary>
        public static string InvalidAiTriggerLevel {
            get {
                return ResourceManager.GetString("InvalidAiTriggerLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid analog input trigger source was specified..
        /// </summary>
        public static string InvalidAiTriggerSource {
            get {
                return ResourceManager.GetString("InvalidAiTriggerSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid analog input trigger type was specified..
        /// </summary>
        public static string InvalidAiTriggerType {
            get {
                return ResourceManager.GetString("InvalidAiTriggerType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid analog output channel was specified..
        /// </summary>
        public static string InvalidAoChannelSpecified {
            get {
                return ResourceManager.GetString("InvalidAoChannelSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid buffer overwrite value was specified..
        /// </summary>
        public static string InvalidBufferOverwrite {
            get {
                return ResourceManager.GetString("InvalidBufferOverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid value for the CAL option was specified..
        /// </summary>
        public static string InvalidCalValue {
            get {
                return ResourceManager.GetString("InvalidCalValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid component name was specified..
        /// </summary>
        public static string InvalidComponentSpecified {
            get {
                return ResourceManager.GetString("InvalidComponentSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid configuration item was specified..
        /// </summary>
        public static string InvalidConfigItem {
            get {
                return ResourceManager.GetString("InvalidConfigItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid configuration type was specified..
        /// </summary>
        public static string InvalidConfigType {
            get {
                return ResourceManager.GetString("InvalidConfigType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid count value was specified..
        /// </summary>
        public static string InvalidCountValueSpecified {
            get {
                return ResourceManager.GetString("InvalidCountValueSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid counter channel was specified..
        /// </summary>
        public static string InvalidCtrChannelSpecified {
            get {
                return ResourceManager.GetString("InvalidCtrChannelSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid value for the analog output channel was specified..
        /// </summary>
        public static string InvalidDACValue {
            get {
                return ResourceManager.GetString("InvalidDACValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid data rate was specified..
        /// </summary>
        public static string InvalidDataRate {
            get {
                return ResourceManager.GetString("InvalidDataRate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The date/time returned from the device is invalid..
        /// </summary>
        public static string InvalidDateTime {
            get {
                return ResourceManager.GetString("InvalidDateTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The handle used for communicating with the device is invalid..
        /// </summary>
        public static string InvalidDeviceHandle {
            get {
                return ResourceManager.GetString("InvalidDeviceHandle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid device ID was specified..
        /// </summary>
        public static string InvalidDeviceId {
            get {
                return ResourceManager.GetString("InvalidDeviceId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid device identifier was used to try to create a DaqDevice object..
        /// </summary>
        public static string InvalidDeviceIdentifier {
            get {
                return ResourceManager.GetString("InvalidDeviceIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid device serial number was specified..
        /// </summary>
        public static string InvalidDeviceSerno {
            get {
                return ResourceManager.GetString("InvalidDeviceSerno", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid digital bit was specified..
        /// </summary>
        public static string InvalidDioBitSpecified {
            get {
                return ResourceManager.GetString("InvalidDioBitSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid digital bit value was specified..
        /// </summary>
        public static string InvalidDioBitValue {
            get {
                return ResourceManager.GetString("InvalidDioBitValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid digital port was specified..
        /// </summary>
        public static string InvalidDioPortSpecified {
            get {
                return ResourceManager.GetString("InvalidDioPortSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid digital port value was specified..
        /// </summary>
        public static string InvalidDioPortValue {
            get {
                return ResourceManager.GetString("InvalidDioPortValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid input block size was specified..
        /// </summary>
        public static string InvalidInputBlockSize {
            get {
                return ResourceManager.GetString("InvalidInputBlockSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid transfer mode was specified..
        /// </summary>
        public static string InvalidInputScanXferMode {
            get {
                return ResourceManager.GetString("InvalidInputScanXferMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message sent is either invalid or not supported by the device..
        /// </summary>
        public static string InvalidMessage {
            get {
                return ResourceManager.GetString("InvalidMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid output buffer size was specified..
        /// </summary>
        public static string InvalidOutputBufferSize {
            get {
                return ResourceManager.GetString("InvalidOutputBufferSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The direction value must be set to DIR=IN or DIR=OUT..
        /// </summary>
        public static string InvalidPortConfig {
            get {
                return ResourceManager.GetString("InvalidPortConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device does not support the property specified..
        /// </summary>
        public static string InvalidPropertySpecified {
            get {
                return ResourceManager.GetString("InvalidPropertySpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid property value was specified..
        /// </summary>
        public static string InvalidPropertyValueSpecified {
            get {
                return ResourceManager.GetString("InvalidPropertyValueSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid queue element was specified..
        /// </summary>
        public static string InvalidQueueElement {
            get {
                return ResourceManager.GetString("InvalidQueueElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid sample count for BURSTIO transfer mode..
        /// </summary>
        public static string InvalidSampleCountForBurstIo {
            get {
                return ResourceManager.GetString("InvalidSampleCountForBurstIo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid scan rate was specified..
        /// </summary>
        public static string InvalidScanRateSpecified {
            get {
                return ResourceManager.GetString("InvalidScanRateSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid timer delay was specified..
        /// </summary>
        public static string InvalidTimerDelay {
            get {
                return ResourceManager.GetString("InvalidTimerDelay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid timer duty cycle was specified..
        /// </summary>
        public static string InvalidTimerDutyCycle {
            get {
                return ResourceManager.GetString("InvalidTimerDutyCycle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid timer period was specified..
        /// </summary>
        public static string InvalidTimerPeriod {
            get {
                return ResourceManager.GetString("InvalidTimerPeriod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The units requested are not valid for the selected channel mode.
        /// </summary>
        public static string InvalidValueResolver {
            get {
                return ResourceManager.GetString("InvalidValueResolver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A bulk transfer was interrupted by the system..
        /// </summary>
        public static string LibusbBulkTransferInterrupted {
            get {
                return ResourceManager.GetString("LibusbBulkTransferInterrupted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Libusb could not be initialized..
        /// </summary>
        public static string LibusbCouldNotBeInitialized {
            get {
                return ResourceManager.GetString("LibusbCouldNotBeInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The libusb-1.0 shared object file could not be loaded..
        /// </summary>
        public static string LibusbCouldNotBeLoaded {
            get {
                return ResourceManager.GetString("LibusbCouldNotBeLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error getting USB devices - LibUsbGetDeviceDescriptor failed..
        /// </summary>
        public static string LibUsbGetDeviceDescriptorFailed {
            get {
                return ResourceManager.GetString("LibUsbGetDeviceDescriptorFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The low channel is greater than the high channel..
        /// </summary>
        public static string LowChannelIsGreaterThanHighChannel {
            get {
                return ResourceManager.GetString("LowChannelIsGreaterThanHighChannel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: The maximum analog input calibration offset has been reached..
        /// </summary>
        public static string MaxAiCalOffsetValueReached {
            get {
                return ResourceManager.GetString("MaxAiCalOffsetValueReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: The maximum analog input calibration slope has been reached..
        /// </summary>
        public static string MaxAiCalSlopeValueReached {
            get {
                return ResourceManager.GetString("MaxAiCalSlopeValueReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum temperature range has been reaced..
        /// </summary>
        public static string MaxTempRange {
            get {
                return ResourceManager.GetString("MaxTempRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message sent is either null, nothing or empty..
        /// </summary>
        public static string MessageIsEmpty {
            get {
                return ResourceManager.GetString("MessageIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string MethodRequiresImplementation {
            get {
                return ResourceManager.GetString("MethodRequiresImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: The minimum analog input calibration offset has been reached..
        /// </summary>
        public static string MinAiCalOffsetValueReached {
            get {
                return ResourceManager.GetString("MinAiCalOffsetValueReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: The minimum analog input calibration slope has been reached..
        /// </summary>
        public static string MinAiCalSlopeValueReached {
            get {
                return ResourceManager.GetString("MinAiCalSlopeValueReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum temperature range has been reached..
        /// </summary>
        public static string MinTempRange {
            get {
                return ResourceManager.GetString("MinTempRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No MBD devices were detected..
        /// </summary>
        public static string NoDevicesDetected {
            get {
                return ResourceManager.GetString("NoDevicesDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No errors have occurred..
        /// </summary>
        public static string NoErrors {
            get {
                return ResourceManager.GetString("NoErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no more input samples available to read.
        /// </summary>
        public static string NoMoreInputSamplesAvailable {
            get {
                return ResourceManager.GetString("NoMoreInputSamplesAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Channels must be in adjacent, ascending order when the analog input queue is enabled..
        /// </summary>
        public static string NonAdjacentNonAscendingChannelsNotSupportedInQueue {
            get {
                return ResourceManager.GetString("NonAdjacentNonAscendingChannelsNotSupportedInQueue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Channels must be in ascending order when the analog input queue is enabled..
        /// </summary>
        public static string NonAscendingChannelsNotSupportedInQueue {
            get {
                return ResourceManager.GetString("NonAscendingChannelsNotSupportedInQueue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-continuous channels may only be used when the queue is enabled..
        /// </summary>
        public static string NoncontiguousChannelsSpecified {
            get {
                return ResourceManager.GetString("NoncontiguousChannelsSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-sequential channels are not supported by the analog input queue..
        /// </summary>
        public static string NonsequentialChannelsNotSupportedInQueue {
            get {
                return ResourceManager.GetString("NonsequentialChannelsNotSupportedInQueue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of samples is greater than half the buffer size..
        /// </summary>
        public static string NumberOfSamplesGreaterThanHalfBuffer {
            get {
                return ResourceManager.GetString("NumberOfSamplesGreaterThanHalfBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of samples per channel is greater than length of the buffer passed to WriteScanData..
        /// </summary>
        public static string NumberOfSamplesPerChannelGreaterThanUserBufferSize {
            get {
                return ResourceManager.GetString("NumberOfSamplesPerChannelGreaterThanUserBufferSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number.
        /// </summary>
        public static string NumberOfSamplesTooLarge {
            get {
                return ResourceManager.GetString("NumberOfSamplesTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An open thermocouple was detected on the specified channel..
        /// </summary>
        public static string OpenThermocouple {
            get {
                return ResourceManager.GetString("OpenThermocouple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the output buffer cannot be set while an output scan is running..
        /// </summary>
        public static string OutputBufferCannotBeSet {
            get {
                return ResourceManager.GetString("OutputBufferCannotBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The output buffer is null or empty..
        /// </summary>
        public static string OutputBufferNullOrEmtpy {
            get {
                return ResourceManager.GetString("OutputBufferNullOrEmtpy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The output buffer size is too small for continuous scanning. The size should be set to at least the output FIFO size..
        /// </summary>
        public static string OutputBufferTooSmallForContinuousScan {
            get {
                return ResourceManager.GetString("OutputBufferTooSmallForContinuousScan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An output scan is already in progress..
        /// </summary>
        public static string OutputScanAlreadyInProgress {
            get {
                return ResourceManager.GetString("OutputScanAlreadyInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The output scan write operation has timed out..
        /// </summary>
        public static string OutputScanTimeout {
            get {
                return ResourceManager.GetString("OutputScanTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The platform is not supported..
        /// </summary>
        public static string PlatformNotSupported {
            get {
                return ResourceManager.GetString("PlatformNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified port cannot be configured for output..
        /// </summary>
        public static string PortIsInputOnly {
            get {
                return ResourceManager.GetString("PortIsInputOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified port cannot be configured for input..
        /// </summary>
        public static string PortIsOutputOnly {
            get {
                return ResourceManager.GetString("PortIsOutputOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified port does not require configuration..
        /// </summary>
        public static string PortRequiresNoConfiguration {
            get {
                return ResourceManager.GetString("PortRequiresNoConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of requested samples to read is greater than the internal buffer size. Increase the buffer size using the BUFSIZE property..
        /// </summary>
        public static string RequestedReadSamplesGreaterThanBufferSize {
            get {
                return ResourceManager.GetString("RequestedReadSamplesGreaterThanBufferSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error getting USB devices - required length is null..
        /// </summary>
        public static string RequiredLengthIsZero {
            get {
                return ResourceManager.GetString("RequiredLengthIsZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error getting USB devices - SetupDiEnumDeviceInterfaces failed..
        /// </summary>
        public static string SetupDiEnumDeviceInterfacesFailed {
            get {
                return ResourceManager.GetString("SetupDiEnumDeviceInterfacesFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReadMultiChannelScanData must be used for a multi channel scan.
        /// </summary>
        public static string SingleChannelReadInvalidForMultiChannelScan {
            get {
                return ResourceManager.GetString("SingleChannelReadInvalidForMultiChannelScan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel&apos;s thermocouple type has not been set..
        /// </summary>
        public static string ThermocoupleTypeNotSet {
            get {
                return ResourceManager.GetString("ThermocoupleTypeNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of samples requested is greater than the size of the scan buffer..
        /// </summary>
        public static string TooManySamplesRequested {
            get {
                return ResourceManager.GetString("TooManySamplesRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The total number of samples is greater than the output buffer size..
        /// </summary>
        public static string TotalNumberOfSamplesGreaterThanOutputBufferSize {
            get {
                return ResourceManager.GetString("TotalNumberOfSamplesGreaterThanOutputBufferSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A USB bulk read error occurred..
        /// </summary>
        public static string UsbBulkReadError {
            get {
                return ResourceManager.GetString("UsbBulkReadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A USB bulk write error occurred..
        /// </summary>
        public static string UsbBulkWriteError {
            get {
                return ResourceManager.GetString("UsbBulkWriteError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A USB pipe error occurred..
        /// </summary>
        public static string UsbPipeError {
            get {
                return ResourceManager.GetString("UsbPipeError", resourceCulture);
            }
        }
    }
}
