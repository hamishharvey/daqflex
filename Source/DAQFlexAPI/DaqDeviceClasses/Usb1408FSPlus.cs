//***************************************************************************************
//
// DAQFlex API Library
//
// Copyright (c) 2011, Measurement Computing Corporation
// All rights reserved
//
// This library is free software; you can redistribute it and/or modify it 
// under the terms of the MEASUREMENT COMPUTING SOFTWARE LICENSE AGREEMENT (DAQFlex API)
// by Measurement Computing Coporation.
// 
// You should have received a copy of the MEASUREMENT COMPUTING SOFTWARE 
// LICENSE AGREEMENT (DAQFlex API) with this library; If not you can contact
// Measurement Computing Corporation, 10 Commerce Way, Norton MA 02766 USA.
// 
//***************************************************************************************
using System;
using System.Collections.Generic;
using System.Text;

namespace MeasurementComputing.DAQFlex
{
   internal class Usb1408FSPlus : DaqDevice
   {
      //===========================================================================
      /// <summary>
      /// Sub-class of DaqDevice that provides methods specific to the USB-7202
      /// </summary>
      /// <param name="deviceInfo">A device info object</param>
      //===========================================================================
      internal Usb1408FSPlus(DeviceInfo deviceInfo)
         : base(deviceInfo, 0x040)
      {
         Ai = new Usb1208FSPlusAi(this, deviceInfo);
         Ao = new Usb1208FSPlusAo(this, deviceInfo);
         Dio = new DioComponent(this, deviceInfo, 2);
         Ctr = new VirtualSSEventCounter(this, deviceInfo, 1);

         m_memReadCmd = 0x32;
         m_memWriteCmd = 0x32;

         m_memLockAddr = 0x000;
         m_memUnlockCode = 0x0000;
         m_memLockCode = 0x0000;

         m_eepromAssistant = new EepromAssistantIV(m_driverInterface);

         // 1/16/2012: version 1.0
         m_defaultDevCapsImage = new byte[] 
                { 0x1F,0x8B,0x08,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0xED,0xBD,0x07,0x60,0x1C,0x49,
                  0x96,0x25,0x26,0x2F,0x6D,0xCA,0x7B,0x7F,0x4A,0xF5,0x4A,0xD7,0xE0,0x74,0xA1,0x08,
                  0x80,0x60,0x13,0x24,0xD8,0x90,0x40,0x10,0xEC,0xC1,0x88,0xCD,0xE6,0x92,0xEC,0x1D,
                  0x69,0x47,0x23,0x29,0xAB,0x2A,0x81,0xCA,0x65,0x56,0x65,0x5D,0x66,0x16,0x40,0xCC,
                  0xED,0x9D,0xBC,0xF7,0xDE,0x7B,0xEF,0xBD,0xF7,0xDE,0x7B,0xEF,0xBD,0xF7,0xBA,0x3B,
                  0x9D,0x4E,0x27,0xF7,0xDF,0xFF,0x3F,0x5C,0x66,0x64,0x01,0x6C,0xF6,0xCE,0x4A,0xDA,
                  0xC9,0x9E,0x21,0x80,0xAA,0xC8,0x1F,0x3F,0x7E,0x7C,0x1F,0x3F,0x22,0xF6,0xEE,0xDD,
                  0xFB,0xDD,0x77,0xC7,0x3B,0xBF,0xFB,0xEE,0xA3,0x9D,0x47,0xDF,0x7A,0xF4,0x7B,0x3F,
                  0xDA,0x7B,0x44,0xBF,0x8D,0x76,0x1F,0xED,0x8E,0xE8,0xF3,0x47,0xF8,0xEF,0xF7,0xC6,
                  0x27,0x8F,0x0E,0xF8,0xAF,0x3D,0xFD,0x6B,0x9F,0xFE,0xBA,0x47,0xBF,0x7D,0x8B,0x5B,
                  0xDC,0xE3,0xBF,0xF6,0xE8,0x2F,0xBC,0xBD,0x37,0xBA,0x37,0xDA,0x1F,0xDD,0x1F,0x7D,
                  0x3A,0x7A,0x30,0x3A,0x18,0x3D,0xFC,0xDD,0xF1,0x96,0x81,0xB2,0xFB,0xE9,0xBD,0x83,
                  0x7B,0xFC,0x89,0x81,0x64,0x3E,0xD9,0xE7,0xDE,0xF9,0x93,0x1D,0x60,0x73,0xDF,0x42,
                  0xDF,0xBF,0xCF,0x7F,0xEE,0xF9,0x7F,0x7E,0xAA,0xAD,0xE9,0x4F,0x20,0xB6,0xFF,0xC0,
                  0xFE,0xBD,0xBB,0xBF,0xF7,0xBB,0xEF,0x3D,0x7A,0x68,0xA1,0xED,0x1F,0xEC,0x10,0x3C,
                  0xC2,0x60,0xD7,0x7E,0xB4,0x33,0xDE,0xD9,0xBD,0x87,0x8F,0x76,0xFA,0xAD,0xF6,0x1C,
                  0xE0,0x87,0xF8,0xDB,0x00,0xA6,0x26,0x3B,0x0F,0x3F,0xA5,0x4F,0xF6,0x05,0x51,0x0C,
                  0x69,0x77,0xE7,0xE1,0x68,0x77,0x97,0x5F,0x7B,0xE8,0xD1,0x89,0xFF,0x74,0x84,0xA2,
                  0x3F,0x0F,0x3C,0xEC,0xD0,0xF1,0x9E,0x23,0xF5,0xFD,0x7B,0xA3,0xFB,0x68,0xB3,0x6F,
                  0x46,0xB4,0xF3,0x08,0xF8,0xDF,0x37,0xAF,0x08,0x39,0xE8,0x95,0x5D,0xF7,0xCA,0xC3,
                  0xD1,0xA7,0xFC,0xD1,0x9E,0xFD,0xE8,0xE0,0xFE,0xE8,0x00,0xC8,0xDD,0x77,0xE8,0x7E,
                  0xBA,0xFF,0xBB,0xD3,0x94,0xDC,0xB3,0x3D,0x7F,0xBA,0x87,0xBF,0x1D,0xF2,0x9F,0xEE,
                  0x8F,0x3E,0xBD,0x3F,0x7A,0xB8,0x37,0x7A,0x78,0x8F,0xBE,0xB8,0xD7,0x85,0xB5,0xFF,
                  0xC8,0xD1,0x6B,0x8F,0xFE,0x32,0x74,0x61,0x3A,0xDC,0xA7,0x0F,0x00,0x59,0x26,0x64,
                  0x0F,0xAD,0xC3,0xE9,0xA3,0xF6,0xF7,0xED,0xF7,0xFB,0x68,0xEE,0xCF,0xD0,0xEE,0xA7,
                  0xBF,0xFB,0xFD,0xEE,0x7C,0xE0,0x13,0x37,0x1D,0xF7,0x77,0x30,0x1D,0xF7,0xBD,0x69,
                  0xDC,0xC5,0x27,0xF8,0x28,0x9C,0xA1,0xFB,0x21,0xE1,0xEE,0xF7,0x26,0xEC,0x7E,0x87,
                  0x26,0xF7,0x1F,0xDD,0x73,0x34,0x39,0xB8,0xFF,0xBB,0x3F,0x08,0xC6,0xF9,0xE0,0xD1,
                  0x1E,0x08,0xBF,0xB3,0x2D,0x3C,0xFB,0xE9,0xA7,0xA3,0x4F,0x1F,0xD0,0x87,0xFB,0xC0,
                  0x6C,0x87,0x3F,0x7A,0xB8,0x3F,0x7A,0x88,0xB7,0xF6,0xB4,0x19,0xBF,0x77,0x1F,0x9F,
                  0x84,0x14,0x78,0xE8,0xC1,0xDD,0xA5,0xBF,0xF6,0x3E,0x65,0x10,0x78,0xE1,0x01,0xBE,
                  0xDD,0xD3,0x3F,0x09,0xCD,0xBD,0x87,0xFB,0x0F,0x3F,0x7D,0xB0,0x47,0x60,0xE9,0xE3,
                  0x07,0xB6,0xD9,0xC1,0x03,0xFA,0xBB,0x23,0x15,0xF7,0x1E,0xDC,0x3B,0xD8,0xF9,0x74,
                  0x7F,0x6F,0xE7,0xFF,0x01,0xA4,0x40,0x83,0xF0,0xB6,0x03,0x00,0x00};
      }

      //=====================================================================================================================
      /// <summary>
      /// Handles the device reflection messages
      /// </summary>
      /// <param name="message">The message</param>
      /// <returns>The message response</returns>
      //=====================================================================================================================
      internal override string GetDevCapsString(string capsKey, bool trim)
      {
         //System.Diagnostics.Debug.Assert(!capsKey.Contains(DevCapNames.QUEUELEN));

         if (capsKey.Contains(DaqComponents.AI) && (capsKey.Contains(DevCapNames.CHANNELS) ||
                                                      capsKey.Contains(DevCapNames.MAXCOUNT) ||
                                                      capsKey.Contains(DevCapNames.RANGES) ||
                                                      capsKey.Contains(DevCapNames.QUEUELEN)))
         {
            //string config = MessageTranslator.GetPropertyValue(SendMessage("?AI:CHMODE").ToString());
            string config;
            string response;
            string capsName;


            if (capsKey.Contains(Constants.VALUE_RESOLVER.ToString()))
            {
               capsName = capsKey;
            }
            else
            {
               string msg = Messages.AI_CHMODE_QUERY;
               SendMessageDirect(msg);
               response = m_driverInterface.ReadStringDirect();
               config = MessageTranslator.GetPropertyValue(response);
               capsName = capsKey + Constants.VALUE_RESOLVER + config;
            }

            string capsValue;

            bool valueFound = m_deviceCaps.TryGetValue(capsName, out capsValue);

            if (valueFound)
            {
               try
               {
                  if (trim)
                  {
                     capsValue = capsValue.Substring(capsValue.IndexOf(Constants.PERCENT) + 1);
                  }
               }
               catch (Exception)
               {
                  System.Diagnostics.Debug.Assert(false, "Exception in GetDevCapsValue");
               }

               return MessageTranslator.ConvertToCurrentCulture(capsValue);
            }
            else
            {
               return string.Empty;
            }
         }
         else
         {
            return base.GetDevCapsString(capsKey, trim);
         }

      }





      ////====================================================================
      ///// <summary>
      ///// Method to shut down a device when the application exits
      ///// </summary>
      ////====================================================================
      //protected override void ShutDownDevice()
      //{
      //    if (!m_deviceReleased)
      //    {
      //        try
      //        {
      //            SendMessage("AISCAN:STOP");
      //            SendMessage("CTR{0}:STOP");
      //        }
      //        catch (Exception)
      //        {
      //            // The devic may have been unplugged
      //        }
      //    }
      //}

   }
}
