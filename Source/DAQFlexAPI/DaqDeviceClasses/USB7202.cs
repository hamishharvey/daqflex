//***************************************************************************************
//
// DAQFlex API Library
//
// Copyright (c) 2009, Measurement Computing Corporation
// All rights reserved
//
// This library is free software; you can redistribute it and/or modify it 
// under the terms of the MEASUREMENT COMPUTING SOFTWARE LICENSE AGREEMENT (DAQFlex API)
// by Measurement Computing Coporation.
// 
// You should have received a copy of the MEASUREMENT COMPUTING SOFTWARE 
// LICENSE AGREEMENT (DAQFlex API) with this library; If not you can contact
// Measurement Computing Corporation, 10 Commerce Way, Norton MA 02766 USA.
// 
//***************************************************************************************

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

namespace MeasurementComputing.DAQFlex
{
    internal class Usb7202 : DaqDevice
    {
        //===========================================================================
        /// <summary>
        /// Sub-class of DaqDevice that provides methods specific to the USB-7202
        /// </summary>
        /// <param name="deviceInfo">A device info object</param>
        //===========================================================================
        internal Usb7202(DeviceInfo deviceInfo)
            : base(deviceInfo, 0x200)
        {
            Ai = new Usb7202Ai(this, deviceInfo);
            Dio = new Usb7202Dio(this, deviceInfo);
            Ctr = new Usb7202Ctr(this, deviceInfo);

            m_memLockAddr = 0x400;
            m_memUnlockCode = 0xAA55;
            m_memLockCode = 0xFFFF;

            // 2/2/2011: version 1.1
            m_defaultDevCapsImage = new byte[] 
                {   0x1F,0x8B,0x08,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0xED,0xBD,0x07,0x60,0x1C,0x49,
                    0x96,0x25,0x26,0x2F,0x6D,0xCA,0x7B,0x7F,0x4A,0xF5,0x4A,0xD7,0xE0,0x74,0xA1,0x08,
                    0x80,0x60,0x13,0x24,0xD8,0x90,0x40,0x10,0xEC,0xC1,0x88,0xCD,0xE6,0x92,0xEC,0x1D,
                    0x69,0x47,0x23,0x29,0xAB,0x2A,0x81,0xCA,0x65,0x56,0x65,0x5D,0x66,0x16,0x40,0xCC,
                    0xED,0x9D,0xBC,0xF7,0xDE,0x7B,0xEF,0xBD,0xF7,0xDE,0x7B,0xEF,0xBD,0xF7,0xBA,0x3B,
                    0x9D,0x4E,0x27,0xF7,0xDF,0xFF,0x3F,0x5C,0x66,0x64,0x01,0x6C,0xF6,0xCE,0x4A,0xDA,
                    0xC9,0x9E,0x21,0x80,0xAA,0xC8,0x1F,0x3F,0x7E,0x7C,0x1F,0x3F,0x22,0xF6,0xF6,0x77,
                    0x7E,0xF7,0xDD,0xF1,0x2E,0xFD,0xF3,0x68,0xE7,0xD1,0xB7,0x1E,0xFD,0xDE,0x8F,0x76,
                    0xE9,0x3F,0xFC,0xB5,0xAB,0x7F,0xED,0x3C,0x3A,0xA0,0xBF,0xF6,0xEC,0x5F,0x9F,0xDE,
                    0xBF,0x7F,0xEF,0x3E,0x7D,0x72,0x8F,0x3E,0xF9,0x16,0x7D,0x4E,0xBF,0x8D,0xF6,0x47,
                    0x0F,0x46,0x0F,0xE9,0xB3,0x7D,0xDB,0x6A,0x77,0x07,0x30,0xEE,0x73,0x1B,0xC0,0xDA,
                    0xC7,0x2B,0x9F,0xDA,0x0E,0xF6,0x0F,0x7E,0xF7,0xBD,0x47,0x0F,0xFD,0xD6,0xF4,0xD0,
                    0x47,0xBB,0xAE,0xD7,0x9D,0xF1,0xFD,0x4F,0x1F,0xE2,0x23,0x83,0xD6,0xCE,0xA3,0xFB,
                    0xA6,0x95,0xC1,0x86,0x7A,0xE0,0xBF,0xEF,0xD9,0x26,0x7B,0x16,0xD2,0x7D,0xEF,0x33,
                    0xFC,0xED,0x70,0xB3,0x60,0x1C,0x3E,0x02,0xE6,0x81,0x6D,0x72,0x6F,0xEF,0xC1,0xA7,
                    0x40,0x71,0x4F,0x3A,0xC7,0x28,0xEF,0xDF,0x1B,0xDD,0xDF,0x1F,0xDD,0xFF,0x14,0x9F,
                    0xEE,0xBA,0x4F,0x1F,0x8E,0x3E,0xDD,0x19,0x1D,0xF0,0xA7,0x7B,0xF6,0xD3,0x83,0xFB,
                    0xF2,0xD1,0x3D,0x83,0x18,0x8F,0xF8,0xDE,0xA3,0x3D,0xF7,0xF7,0xA7,0x7B,0xF8,0x7B,
                    0xDF,0xBE,0xF2,0xE9,0xFE,0xE8,0xD3,0xFB,0xBF,0xFB,0x03,0x8F,0xEC,0xBB,0xF4,0xD7,
                    0xDE,0x01,0xFD,0xB9,0x23,0x0D,0x3E,0x1D,0x7D,0xFA,0x60,0xF4,0xE9,0xC1,0x88,0xA8,
                    0xF2,0x80,0xE7,0x63,0x47,0x46,0x77,0x1F,0xAF,0x85,0x94,0x7F,0x18,0x80,0x79,0xF8,
                    0x68,0xEF,0x53,0x6D,0xBE,0xFB,0xE8,0x01,0xBE,0x75,0x6F,0xEF,0xEF,0x3D,0xDC,0x7F,
                    0xF8,0xE9,0x83,0xBD,0x87,0xF7,0xF1,0xF1,0x03,0xDB,0xEC,0xE0,0x01,0xFD,0x1D,0x02,
                    0xBD,0xF7,0x70,0xFF,0xDE,0xBD,0xFD,0xBD,0xDD,0xFD,0x87,0xFF,0x0F,0x96,0xCA,0x6B,
                    0x3B,0x34,0x02,0x00,0x00 };
        }

        //===========================================================================================
        /// <summary>
        /// Overidden to check if a BURSTIO scan running
        /// </summary>
        /// <param name="message">The message to process</param>
        /// <returns>True if the message is to be sent to the device, otherwise false</returns>
        //===========================================================================================
        internal override bool PreprocessMessage(ref string message, string messageType)
        {
            ScanState scanState = DriverInterface.InputScanStatus;

            if (scanState == ScanState.Running && CriticalParams.InputTransferMode == TransferMode.BurstIO)
            {
                if (message.Contains(APIMessages.AISCANCOUNT_QUERY) ||
                        message.Contains(APIMessages.AISCANINDEX_QUERY) ||
                            message.Contains(APIMessages.AISCANSTATUS_QUERY) ||
                                message.Contains(DaqCommands.STOP))
                {
                    return base.PreprocessMessage(ref message, messageType);
                }
                else
                {
                    m_apiMessageError = ErrorCodes.BurstIoInProgress;
                    return false;
                }
            }
            else
            {
                return base.PreprocessMessage(ref message, messageType);
            }
        }

        //====================================================================
        /// <summary>
        /// Method to shut down a device when the application exits
        /// </summary>
        //====================================================================
        protected override void ShutDownDevice()
        {
            if (!m_deviceReleased)
            {
                try
                {
                    SendMessage("AISCAN:STOP");
                    SendMessage("CTR{0}:STOP");
                }
                catch (Exception)
                {
                    // The devic may have been unplugged
                }
            }
        }
    }
}
